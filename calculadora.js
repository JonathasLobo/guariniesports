// ====================================
// CALCULADORA POK√âMON - VERS√ÉO SEM M√ìDULOS
// Funciona diretamente em file://
// ====================================

console.log("üöÄ calculadora.js carregado!");

// Lista de Pok√©mons
const pokemons = [
  "Absol", "Aegislash", "Alcremie", "Armarouge", "Azumarill", "Blastoise",
  "Blaziken", "Blissey", "Buzzwole", "Ceruledge", "Chandelure", "Charizard",
  "Cinderace", "Clefable", "Comfey", "Cramorant", "Crustle", "Darkrai", "Decidueye", "Delphox",
  "Dodrio", "Dragapult", "Dragonite", "Duraludon", "Eldegoss", "Espeon", "Falinks",
  "Garchomp", "Gardevoir", "Gengar", "Glaceon", "Goodra", "Greedent",
  "Greninja", "Gyarados", "Ho-Oh", "Hoopa", "Inteleon", "Lapras", "Latias", "Latios",
  "Leafeon", "Lucario", "Machamp", "Mamoswine", "Meowscarada", "Metagross", "Mew", "Mewtwo Y",
  "Mewtwo X", "Mimikyu", "Miraidon", "Mr. Mime", "Ninetales", "Pawmot", "Pikachu", "Psyduck", 
  "Raichu", "Rapidash", "Sableye", "Scizor", "Slowbro", "Snorlax", "Suicune", "Sylveon", 
  "Talonflame", "Tinkaton", "Trevenant", "Tsareena", "Tyranitar", "Umbreon", "Urshifu", 
  "Venusaur", "Wigglytuff", "Zacian", "Zeraora", "Zoroark"
];

let season = {}, total = {};

// Fun√ß√£o para popular o select
function popularSelectPokemons() {
  console.log("üîÑ Populando lista de Pok√©mons...");
  
  const select = document.getElementById("pokemon");
  if (!select) {
    console.error("‚ùå Elemento #pokemon n√£o encontrado!");
    return;
  }
  
  // Limpa op√ß√µes existentes (exceto a primeira)
  while (select.children.length > 1) {
    select.removeChild(select.lastChild);
  }
  
  // Adiciona cada Pok√©mon
  pokemons.forEach(pokemon => {
    const option = document.createElement("option");
    option.value = pokemon;
    option.textContent = pokemon;
    
    // Adiciona estilo de imagem
    const imagePath = `./img-poke/${pokemon.toLowerCase().replace(/ /g, "-").replace(".", "").replace("‚ôÄ", "f").replace("‚ôÇ", "m")}.png`;
    option.style.backgroundImage = `url('${imagePath}')`;
    option.style.backgroundSize = '20px 20px';
    option.style.backgroundRepeat = 'no-repeat';
    option.style.backgroundPosition = '8px center';
    option.style.paddingLeft = '35px';
    
    select.appendChild(option);
  });
  
  console.log(`‚úÖ ${pokemons.length} Pok√©mons carregados com sucesso!`);
}

// Fun√ß√£o de inicializa√ß√£o
function inicializar() {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', popularSelectPokemons);
  } else {
    popularSelectPokemons();
  }
}

// Executar inicializa√ß√£o
inicializar();

// ====================================
// FUN√á√ïES DA CALCULADORA
// ====================================

function carregarDados() {
  const texto = document.getElementById("dadosTexto").value;
  if (!texto) {
    alert("Cole os dados do site!");
    return false;
  }

  // Regex para dados em ingl√™s
  const seasonBattlesEN = texto.match(/Season Battles\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const seasonWinsEN = texto.match(/Season Wins\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const seasonMVPEN = texto.match(/Season MVP\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalBattlesEN = texto.match(/Total Battles\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalWinsEN = texto.match(/(?:No\.\s*Of\s*Wins|Total Wins)\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalMVPEN = texto.match(/Total MVP\s*\*?\*?(\d+)\*?\*?/i)?.[1];

  // Regex para dados em portugu√™s
  const seasonBattlesPT = texto.match(/Batalhas\s+da\s+Temporada\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const seasonWinsPT = texto.match(/Vit√≥rias\s+da\s+Temporada\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const seasonMVPPT = texto.match(/MVP\s+da\s+Temporada\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalBattlesPT = texto.match(/Batalhas\s+totais\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalWinsPT = texto.match(/(?:No\.\s*de\s*Vit√≥rias|Vit√≥rias\s+totais)\s*\*?\*?(\d+)\*?\*?/i)?.[1];
  const totalMVPPT = texto.match(/MVP\s+Total\s*\*?\*?(\d+)\*?\*?/i)?.[1];

  season = {
    battles: parseInt(seasonBattlesEN || seasonBattlesPT) || 0,
    wins: parseInt(seasonWinsEN || seasonWinsPT) || 0,
    mvps: parseInt(seasonMVPEN || seasonMVPPT) || 0
  };
  season.losses = season.battles - season.wins;

  total = {
    battles: parseInt(totalBattlesEN || totalBattlesPT) || 0,
    wins: parseInt(totalWinsEN || totalWinsPT) || 0,
    mvps: parseInt(totalMVPEN || totalMVPPT) || 0
  };
  total.losses = total.battles - total.wins;

  if (season.battles === 0 && total.battles === 0) {
    alert("Dados inv√°lidos. Verifique o conte√∫do colado.");
    return false;
  }

  return true;
}

function avaliarDesempenho(role, desempenho) {
  if (["ADC", "JGL", "TOP"].includes(role)) {
    if (desempenho < 30) return "Fraco";
    if (desempenho < 50) return "Mediano";
    if (desempenho < 70) return "Bom";
    if (desempenho < 90) return "Muito bom";
    return "Excelente";
  } else if (["SUP", "TANK"].includes(role)) {
    if (desempenho < 30) return "Fraco";
    if (desempenho < 50) return "Mediano";
    if (desempenho < 70) return "Bom";
    if (desempenho < 90) return "Muito bom";
    return "Excelente";
  }
}

function calcularPorcentagens(stats) {
  const winRate = stats.battles ? (stats.wins / stats.battles) * 100 : 0;
  const mvpRate = stats.battles ? (stats.mvps / stats.battles) * 100 : 0;
  const mvpWinRate = stats.wins ? (stats.mvps / stats.wins) * 100 : 0;
  return {
    winRate: winRate.toFixed(2),
    mvpRate: mvpRate.toFixed(2),
    mvpWinRate: mvpWinRate.toFixed(2)
  };
}

function calcularDesempenhoCombinado(winRate, mvpWinRate, role) {
  const win = parseFloat(winRate);
  let mvp = parseFloat(mvpWinRate);

  if (role === "SUP" || role === "TANK") {
    mvp *= 2.5;
  }

  return ((win + mvp) / 2).toFixed(2);
}

// ====================================
// FUN√á√ïES GLOBAIS
// ====================================

window.calcularDesempenho = function() {
  const jogador = document.getElementById("jogador").value;
  const pokemon = document.getElementById("pokemon").value;
  const role = document.getElementById("role").value;

  if (!jogador || !pokemon || !role) {
    alert("Preencha todos os campos obrigat√≥rios!");
    return;
  }

  if (!carregarDados()) {
    return;
  }

  const temp = calcularPorcentagens(season);
  const tot = calcularPorcentagens(total);

  const desempenhoTemporada = calcularDesempenhoCombinado(temp.winRate, temp.mvpWinRate, role);
  const desempenhoTotal = calcularDesempenhoCombinado(tot.winRate, tot.mvpWinRate, role);

  // Atualiza imagem do Pok√©mon
  const imgResultado = document.getElementById("imagemPokemonResultado");
  imgResultado.src = `./img-poke/${pokemon.toLowerCase().replace(/ /g, "-").replace(".", "").replace("‚ôÄ", "f").replace("‚ôÇ", "m")}.png`;
  imgResultado.alt = pokemon;

  // Define cores da role
  const roleColors = {
    'ADC': 'role-adc',
    'JGL': 'role-jgl', 
    'TANK': 'role-tank',
    'SUP': 'role-sup',
    'TOP': 'role-top'
  };
  const roleColorClass = roleColors[role] || 'role-adc';

  // Atualiza informa√ß√µes do jogador
  document.getElementById("info-jogador").innerHTML = `
    <div><strong>${jogador}</strong></div>
    <div style="color: #007bff; font-size: 16px; margin: 5px 0;">${pokemon}</div>
    <div class="${roleColorClass}" style="padding: 6px 12px; border-radius: 6px; display: inline-block; font-size: 13px; font-weight: bold;">${role}</div>
  `;

  // Atualiza dados da temporada
  const avaliacaoTemporada = avaliarDesempenho(role, desempenhoTemporada);
  document.getElementById("dados-temporada").innerHTML = `
    <div class="stat-line">
      <span class="stat-label">Partidas:</span>
      <span class="stat-value">${season.battles}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Vit√≥rias:</span>
      <span class="stat-value">${season.wins}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Derrotas:</span>
      <span class="stat-value">${season.losses}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVPs:</span>
      <span class="stat-value">${season.mvps}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Win Rate:</span>
      <span class="stat-value">${temp.winRate}%</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVP/Partida:</span>
      <span class="stat-value">${temp.mvpRate}%</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVP/Vit√≥ria:</span>
      <span class="stat-value">${temp.mvpWinRate}%</span>
    </div>
    <div class="stat-line desempenho-line">
      <span class="stat-label">üîç Desempenho:</span>
      <span class="stat-value">${desempenhoTemporada}%</span>
    </div>
    <div class="avaliacao ${avaliacaoTemporada.toLowerCase().replace(' ', '-')}">
      ‚úÖ ${avaliacaoTemporada}
    </div>
  `;

  // Atualiza dados totais
  const avaliacaoTotal = avaliarDesempenho(role, desempenhoTotal);
  document.getElementById("dados-total").innerHTML = `
    <div class="stat-line">
      <span class="stat-label">Partidas:</span>
      <span class="stat-value">${total.battles}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Vit√≥rias:</span>
      <span class="stat-value">${total.wins}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Derrotas:</span>
      <span class="stat-value">${total.losses}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVPs:</span>
      <span class="stat-value">${total.mvps}</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">Win Rate:</span>
      <span class="stat-value">${tot.winRate}%</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVP/Partida:</span>
      <span class="stat-value">${tot.mvpRate}%</span>
    </div>
    <div class="stat-line">
      <span class="stat-label">MVP/Vit√≥ria:</span>
      <span class="stat-value">${tot.mvpWinRate}%</span>
    </div>
    <div class="stat-line desempenho-line">
      <span class="stat-label">üîç Desempenho:</span>
      <span class="stat-value">${desempenhoTotal}%</span>
    </div>
    <div class="avaliacao ${avaliacaoTotal.toLowerCase().replace(' ', '-')}">
      ‚úÖ ${avaliacaoTotal}
    </div>
  `;

  // Mostra ou esconde info do multiplicador
  const multiplicadorInfo = document.getElementById("multiplicador-info");
  if (role === "SUP" || role === "TANK") {
    multiplicadorInfo.style.display = "block";
  } else {
    multiplicadorInfo.style.display = "none";
  }

  // Mostra o container de resultado
  document.getElementById("resultado-completo").style.display = "flex";

  // Mant√©m a div resultado original preenchida para a fun√ß√£o copiar
  let mensagemMultiplicador = "";
  if (role === "SUP" || role === "TANK") {
    mensagemMultiplicador = "\n\n‚ö†Ô∏è No c√°lculo de desempenho de SUP e TANK √© utilizado um multiplicador para o valor de MVP, pois essas roles t√™m menos MVPs por partida.";
  }

  const resultadoFinal = `Jogador: ${jogador}
Pok√©mon: ${pokemon}
Fun√ß√£o: ${role}

üîπ Temporada:
- Partidas: ${season.battles}
- Vit√≥rias: ${season.wins}
- Derrotas: ${season.losses}
- MVPs: ${season.mvps}
- Win Rate: ${temp.winRate}%
- MVP/Partida: ${temp.mvpRate}%
- MVP/Vit√≥ria: ${temp.mvpWinRate}%
- üîç Desempenho da Temporada: ${desempenhoTemporada}%
- ‚úÖ Avalia√ß√£o: ${avaliacaoTemporada}

üî∏ Total:
- Partidas: ${total.battles}
- Vit√≥rias: ${total.wins}
- Derrotas: ${total.losses}
- MVPs: ${total.mvps}
- Win Rate: ${tot.winRate}%
- MVP/Partida: ${tot.mvpRate}%
- MVP/Vit√≥ria: ${tot.mvpWinRate}%
- üîç Desempenho Total: ${desempenhoTotal}%
- ‚úÖ Avalia√ß√£o: ${avaliacaoTotal}${mensagemMultiplicador}`;

  document.getElementById("resultado").innerText = resultadoFinal;
};

window.limparCampos = function() {
  document.getElementById("jogador").value = "";
  document.getElementById("pokemon").value = "";
  document.getElementById("role").value = "";
  document.getElementById("dadosTexto").value = "";
  document.getElementById("resultado-completo").style.display = "none";
  document.getElementById("multiplicador-info").style.display = "none";
  document.getElementById("resultado").innerText = "";
  season = {};
  total = {};
};

window.copiarResultado = function() {
  const jogador = document.getElementById("jogador").value;
  const pokemon = document.getElementById("pokemon").value;
  const role = document.getElementById("role").value;

  if (!jogador || !pokemon || !role || (season.battles === 0 && total.battles === 0)) {
    return alert("Nenhum resultado para copiar!");
  }

  const temp = calcularPorcentagens(season);
  const tot = calcularPorcentagens(total);

  const desempenhoTemporada = calcularDesempenhoCombinado(temp.winRate, temp.mvpWinRate, role);
  const desempenhoTotal = calcularDesempenhoCombinado(tot.winRate, tot.mvpWinRate, role);

  const avaliacaoTemporada = avaliarDesempenho(role, desempenhoTemporada);
  const avaliacaoTotal = avaliarDesempenho(role, desempenhoTotal);

  let mensagemMultiplicador = "";
  if (role === "SUP" || role === "TANK") {
    mensagemMultiplicador = "\n‚ö†Ô∏è No c√°lculo de desempenho de SUP e TANK √© utilizado um multiplicador para o valor de MVP, pois essas roles t√™m menos MVPs por partida.";
  }

  const resultadoFinal = `üî• RELAT√ìRIO DE DESEMPENHO - POK√âMON UNITE üî•

üë§ Jogador: ${jogador}
üéÆ Pok√©mon: ${pokemon}
‚öîÔ∏è Fun√ß√£o: ${role}

üîπ DADOS DA TEMPORADA:
‚Ä¢ Partidas: ${season.battles}
‚Ä¢ Vit√≥rias: ${season.wins}
‚Ä¢ Derrotas: ${season.losses}
‚Ä¢ MVPs: ${season.mvps}
‚Ä¢ Win Rate: ${temp.winRate}%
‚Ä¢ MVP/Partida: ${temp.mvpRate}%
‚Ä¢ MVP/Vit√≥ria: ${temp.mvpWinRate}%
‚Ä¢ üîç Desempenho da Temporada: ${desempenhoTemporada}%
‚Ä¢ ‚úÖ Avalia√ß√£o: ${avaliacaoTemporada}

üî∏ DADOS TOTAIS:
‚Ä¢ Partidas: ${total.battles}
‚Ä¢ Vit√≥rias: ${total.wins}
‚Ä¢ Derrotas: ${total.losses}
‚Ä¢ MVPs: ${total.mvps}
‚Ä¢ Win Rate: ${tot.winRate}%
‚Ä¢ MVP/Partida: ${tot.mvpRate}%
‚Ä¢ MVP/Vit√≥ria: ${tot.mvpWinRate}%
‚Ä¢ üîç Desempenho Total: ${desempenhoTotal}%
‚Ä¢ ‚úÖ Avalia√ß√£o: ${avaliacaoTotal}${mensagemMultiplicador}

üìä Calculadora Guarin√≠ e-sport`;

  navigator.clipboard.writeText(resultadoFinal);
  alert("Resultado copiado para a √°rea de transfer√™ncia!");
};